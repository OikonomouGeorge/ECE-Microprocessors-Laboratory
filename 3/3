#define F_CPU 16000000UL
#include <avr/io.h>
#include <avr/interrupt.h>
#include <math.h>
#include <util/delay.h>


uint16_t adc_read(void) {
// Set ADSC flag of ADSCRA
ADCSRA |= (1 << ADSC);

// Wait for ADSC flag to become '0'
while (ADCSRA & (1 << ADSC));
    
    return ADC;
}

int main(void) {
    
   TCCR1A = (1<<WGM10) | (1<<COM1A1); 
   TCCR1B = (1<<WGM12) | (1<<CS10);
   //Set Vref = 5V
   ADMUX = (1 << REFS0) | (1 << MUX0) |(1 << ADLAR);

   //Enable ADC & set ADC prescaler
   ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0);
   
    DDRB = 0xFF;    // Set PORTB as output
    DDRC = 0xFF;    // Set PORTC as output
    DDRD = 0x00;    // Set PORTD as input
    char table[13] = {0xFA, 0xE5, 0xD1, 0xBC, 0xA8, 0x94, 0x7F, 0x6B, 0x57, 0x42, 0x2E, 0x19, 0x05};
    
    int index = 6;             // keeps the index of the table, is 6 cause the table[6]=128=50% duty cycle
    OCR1AH = 0x00;             // values from 0 to 255
    OCR1AL = table[index];     // init PWM 
    
    //Set Vref = 5V
    ADMUX = (1<<REFS0) | (1<<ADLAR);
    
    //Enable ADC & set ADC prescaler to 128
    ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) |(1 << ADPS0);
    
    unsigned char MODE = 1;
    while(1){
        
         if (PIND == 0b10111111) {    //PD6
            MODE = 1;
        }
        if (PIND == 0b01111111) {  //PD7
            MODE = 2;
        }
         while(MODE==1){
        if((PIND & 0x02) == 0x00) { // PD1 is pressed
           do { //wait while the button is still being pressed
               _delay_ms(5);
              } while((PIND & 0x02) == 0x00); 
        
         if(index == 0) continue;   // don't increase duty cycle if it's already at 98%
            OCR1AH = 0x00;                // values from 0 to 255
            OCR1AL = table[--index];    // decrease index=> increase duty cycle and fetch OCR1AL value  
        }
        
         if((PIND & 0x04) == 0x00) { // check if PD2 pressed (logical 0)
            do {
                _delay_ms(5);
            } while((PIND & 0x04) == 0x00); // while being pressed wait
            if(index == 12) continue;   // don't decrease duty cycle if its already at  2%
            OCR1AH = 0x00;               // values from 0 to 255
            OCR1AL = table[++ index];  // increase counter=> decrease duty cycle and fetch OCR1AL value
        }
        if (PIND == 0b01111111) {  //PD7
                MODE = 2;   
        }}
        while (MODE=2){
           OCR1AL = adc_read() >> 2; 
            }  
        }
        
    }
