#define F_CPU 16000000UL
#include<avr/io.h>
#include<avr/interrupt.h>
#include<util/delay.h>
#define PCA9555_0_ADDRESS 0x40 //A0=A1=A2=0 by hardware
#define TWI_READ 1 // reading from twi device
#define TWI_WRITE 0 // writing to twi device
#define SCL_CLOCK 100000L // twi clock in Hz
//Fscl=Fcpu/(16+2*TWBR0_VALUE*PRESCALER_VALUE)
#define TWBR0_VALUE ((F_CPU/SCL_CLOCK)-16)/2
// PCA9555 REGISTERS
typedef enum {
 REG_INPUT_0 = 0,
 REG_INPUT_1 = 1,
 REG_OUTPUT_0 = 2,
 REG_OUTPUT_1 = 3,
 REG_POLARITY_INV_0 = 4,
 REG_POLARITY_INV_1 = 5,
 REG_CONFIGURATION_0 = 6,
 REG_CONFIGURATION_1 = 7
} PCA9555_REGISTERS;
//----------- Master Transmitter/Receiver -------------------
#define TW_START 0x08
#define TW_REP_START 0x10
//---------------- Master Transmitter ----------------------
#define TW_MT_SLA_ACK 0x18
#define TW_MT_SLA_NACK 0x20
#define TW_MT_DATA_ACK 0x28
//---------------- Master Receiver ----------------
#define TW_MR_SLA_ACK 0x40
#define TW_MR_SLA_NACK 0x48
#define TW_MR_DATA_NACK 0x58
#define TW_STATUS_MASK 0b11111000
#define TW_STATUS (TWSR0 & TW_STATUS_MASK)
//initialize TWI clock

void twi_init(void)
{
 TWSR0 = 0; // PRESCALER_VALUE=1
 TWBR0 = TWBR0_VALUE; // SCL_CLOCK 100KHz
}
// Read one byte from the twi device (request more data from device)
unsigned char twi_readAck(void)
{
TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
while(!(TWCR0 & (1<<TWINT)));
 return TWDR0;
}
//Read one byte from the twi device, read is followed by a stop condition
unsigned char twi_readNak(void)
{
TWCR0 = (1<<TWINT) | (1<<TWEN);
while(!(TWCR0 & (1<<TWINT)));
 return TWDR0;
}
// Issues a start condition and sends address and transfer direction.
// return 0 = device accessible, 1= failed to access device
unsigned char twi_start(unsigned char address)
{
 uint8_t twi_status;
// send START condition
TWCR0 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
// wait until transmission completed
while(!(TWCR0 & (1<<TWINT)));
// check value of TWI Status Register.
twi_status = TW_STATUS & 0xF8;
if ( (twi_status != TW_START) && (twi_status != TW_REP_START)) return 1;
// send device address
TWDR0 = address;
TWCR0 = (1<<TWINT) | (1<<TWEN);
// wail until transmission completed and ACK/NACK has been received
while(!(TWCR0 & (1<<TWINT)));
// check value of TWI Status Register.
twi_status = TW_STATUS & 0xF8;
if ( (twi_status != TW_MT_SLA_ACK) && (twi_status != TW_MR_SLA_ACK) )
 {
 return 1;
 }
return 0;
}
// Send start condition, address, transfer direction.
// Use ack polling to wait until device is ready
void twi_start_wait(unsigned char address)
{
 uint8_t twi_status;
 while ( 1 )
 {
// send START condition
TWCR0 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);

 // wait until transmission completed
 while(!(TWCR0 & (1<<TWINT)));

 // check value of TWI Status Register.
 twi_status = TW_STATUS & 0xF8;
 if ( (twi_status != TW_START) && (twi_status != TW_REP_START)) continue;

 // send device address
 TWDR0 = address;
 TWCR0 = (1<<TWINT) | (1<<TWEN);

 // wail until transmission completed
 while(!(TWCR0 & (1<<TWINT)));

 // check value of TWI Status Register.
 twi_status = TW_STATUS & 0xF8;
 if ( (twi_status == TW_MT_SLA_NACK )||(twi_status ==TW_MR_DATA_NACK) )
 {
 /* device busy, send stop condition to terminate write operation */
 TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);

 // wait until stop condition is executed and bus released
 while(TWCR0 & (1<<TWSTO));

 continue;
 }
break;
 }
}
// Send one byte to twi device, Return 0 if write successful or 1 if write failed
unsigned char twi_write( unsigned char data )
{
// send data to the previously addressed device
TWDR0 = data;
TWCR0 = (1<<TWINT) | (1<<TWEN);
// wait until transmission completed
while(!(TWCR0 & (1<<TWINT)));
if( (TW_STATUS & 0xF8) != TW_MT_DATA_ACK) return 1;
return 0;
}
// Send repeated start condition, address, transfer direction
//Return: 0 device accessible
// 1 failed to access device
unsigned char twi_rep_start(unsigned char address)
{
 return twi_start( address );
}
// Terminates the data transfer and releases the twi bus
void twi_stop(void)
{
// send stop condition
TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
// wait until stop condition is executed and bus released
while(TWCR0 & (1<<TWSTO));
}
void PCA9555_0_write(PCA9555_REGISTERS reg, uint8_t value)
{
 twi_start_wait(PCA9555_0_ADDRESS + TWI_WRITE);
 twi_write(reg);
 twi_write(value);
 twi_stop();
}
uint8_t PCA9555_0_read(PCA9555_REGISTERS reg)
{
uint8_t ret_val;

 twi_start_wait(PCA9555_0_ADDRESS + TWI_WRITE);
 twi_write(reg);
 twi_rep_start(PCA9555_0_ADDRESS + TWI_READ);
 ret_val = twi_readNak();
 twi_stop();

 return ret_val;
}

uint8_t scan_row(uint8_t row){
    uint8_t flag = 00000001;
    flag = flag <<row; //create row index 
    flag = ~flag; //set to zero
    PCA9555_0_write(REG_OUTPUT_1,flag);
    uint8_t input = PCA9555_0_read(REG_INPUT_1)>>4;
    
    return input;
   }

uint16_t scan_keypad(){
    uint16_t result=0;
    result= (scan_row(0)) + (scan_row(1) << 4) + (scan_row(2) << 8) +(scan_row(3) << 12);
      
    return result;
}

uint16_t scan_keyboard_rising_edge(){
    uint16_t pressed_keys = scan_keypad();
    _delay_ms(20);
    uint16_t pressed_keys_tempo = scan_keypad();
    
    return (~pressed_keys & ~pressed_keys_tempo);
} 

uint8_t keypad_to_ascii(){

    if (scan_keyboard_rising_edge() == 32768) {return 'A';}
    if (scan_keyboard_rising_edge() == 32768/2) {return '3';}
    if (scan_keyboard_rising_edge() == 32768/4) {return '2';}
    if (scan_keyboard_rising_edge() == 32768/8) { return '1';}
    if (scan_keyboard_rising_edge() == 32768/16) {return 'B';}
    if (scan_keyboard_rising_edge() == 32768/32) {return '6';}
    if (scan_keyboard_rising_edge() == 32768/64) {return '5';}
    if (scan_keyboard_rising_edge() == 32768/128) {return '4';}
    if (scan_keyboard_rising_edge() == 32768/256) {return 'C';}
    if (scan_keyboard_rising_edge() == 32768/512) {return '9';}
    if (scan_keyboard_rising_edge() == 32768/1024) {return '8';}
    if (scan_keyboard_rising_edge() == 32768/2048) {return '7';}
    if (scan_keyboard_rising_edge() == 32768/4096) {return 'D';}
    if (scan_keyboard_rising_edge() == 32768/8192) {return '#';}
    if (scan_keyboard_rising_edge() == 32768/16384) {return '0';}
    if (scan_keyboard_rising_edge() == 1) {return '*';}
    if (scan_keyboard_rising_edge() == 0) {return 0;}
}

int main ()
{
    twi_init();

    //PCA9555_0_write(REG_CONFIGURATION_0, 0x00);
    // IO1_0 as output, IO1_4 - IO0_7 as input
    // [IO1_7:IO1_0] = 0b11110000
    PCA9555_0_write(REG_CONFIGURATION_1, 0xF0);
    
    // Init PORTB Output
    DDRB |= 0xFF;
    PORTB = 0;
    uint16_t temp = 0, first, second;
   
    while(1)
    {
        while (temp == 0)
        {
            temp = keypad_to_ascii();  
        }
    
        first = temp;
        temp = 0;
        
        while(keypad_to_ascii()!=0){};
        
        while (temp == 0)
        {
            temp = keypad_to_ascii();  
        }
    
        second = temp;
        temp = 0;
        
        while(keypad_to_ascii()!=0){};

        // '3' = 0b10000000000000
        if ((first == '3') && (second == '0'))
        {
            PORTB = 0xFF;
            _delay_ms(3000);
            PORTB = 0x00;
            _delay_ms(2000);
        }
       
        else 
        {
            for (int i = 0; i<=4; i++)
            {
                PORTB = 0xFF;
                _delay_ms(500);
                PORTB = 0x00;
                _delay_ms(500);
                
            }
            
        
        }
         
    }
    
}
