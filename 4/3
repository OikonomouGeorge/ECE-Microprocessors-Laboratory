/*
 * File:   03.c
 */

#define F_CPU 16000000UL
#define threshold 200
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdio.h>

// = 0, gas <= 70ppm
uint8_t gas_detected = 0;
uint16_t gas_value = 0;

void write_2_nibbles(uint8_t input)
{
        uint8_t temp = input;
        // LCD Data High Bytes
        PORTD = (PIND & 0x0f) + (temp & 0xf0); 
        // Enable pulse
        PORTD |= 0x08; 
        _delay_us(2);
        PORTD &= ~(0x08);
        input = (input<<4)|(input>>4);
        // LCD Data Low Bytes
        PORTD = (PIND & 0x0f) + (input & 0xf0); 
        // Enable pulse
        PORTD |= 0x08;  
        _delay_us(2);
        PORTD &= ~(0x08);    
};

void lcd_command(uint8_t command)
{   
    //LCD_RS=0 => Instruction
    PORTD &= ~4; 
    write_2_nibbles(command);
    _delay_us(250);
}

void lcd_data(unsigned char data)
{
    // LCD_RS = 1 => Data
    PORTD |= 4; 
    write_2_nibbles(data);
    _delay_us(250);
}

void lcd_clear_display()
{
    // For most LED screens
    lcd_command(0x01); 
    _delay_ms(5);
}

void lcd_init()
{
    _delay_ms(200);
    int i=0;
    
    // Command to switch to 8 bit mode
    while(i<3)
    {      
        PORTD=0x30;
        PORTD|=0x08;
        _delay_us(2);
        PORTD&=~0x08;
        _delay_us(250);
        ++i;
    }
    
    PORTD = 0x20;     // Command to switch to 4 bit mode
    PORTD |= 0x08;
    _delay_us(2);
    PORTD &= ~0x08;
    _delay_us(250);
   
    lcd_command(0x28); // 5*8 dots, 2 lines
    lcd_command(0x0c); // display on, cursor off
   
    lcd_clear_display();
}

void led_data(uint16_t data)
{
    
    if (data == 0) {PORTB = 0;}
    if (data > 0) {PORTB = 1;}
    if (data > 40) {PORTB = 3;}
    if (data > 80) {PORTB = 7;}
    if (data > 120) {PORTB = 15;}
    if (data > 160) {PORTB = 31;}
    if (data > 180) {PORTB = 63;}
    
    if (data > threshold)
    {
       PORTB ^= 63;
       _delay_ms(300);
       PORTB = 0;
       _delay_ms(300);
       PORTB ^= 63;
       _delay_ms(300);
       PORTB = 0;
    }
}

ISR(ADC_vect)
{
    gas_value = ADC;
    gas_detected = (gas_value > threshold);
}

int main() {
    
    // Output to LCD Display
    DDRD |= 0xFF;
    // Output to LED Display
    DDRB |= 0xFF;
    
    // MUX[3:0] = 0010 for ADC2
    // REFS[1:0] = 01 for AVCC with external capacitor at AREF pin
    ADMUX |= 0b01000010;
    // ADIE = 1 => enable ADC interrupt, 
    // ADPS[2:0] = 111 => fADC = 16MHz/128 = 125KHz
    ADCSRA |= 0b10001111; 
    
    lcd_init();
    sei();
    ADCSRA |= (1<<ADSC); // ADSC: ADC Start Conversion, Start ADC
    
    while (1) 
    {
        _delay_ms(100);
        
        if (gas_detected)
        {
           PORTB = 63;
           lcd_clear_display();
           char signal[] = "GAS DETECTED";
           
           for (int i=0; signal[i]!=0; i++)
           {
               lcd_data(signal[i]);
           }
           
           while (gas_detected)
           {                
               led_data(gas_value);         
               _delay_ms(100);
               ADCSRA |= (1<<ADSC);
           }  
        }
        
        else  
        {
           PORTB = 0;
           lcd_clear_display(); 
           
           char signal[] = "CLEAR";
           
           for (int i=0; signal[i]!=0; i++)
           {
               lcd_data(signal[i]);
           }
           
           while (!gas_detected)
           {
               led_data(gas_value);
               _delay_ms(100);  
               ADCSRA |= (1<<ADSC);
          
           }
        }
    
    }
}
