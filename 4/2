#define F_CPU 16000000UL
#include "avr/io.h"
#include <util/delay.h>
#include <stdio.h>

void write_2_nibbles(uint8_t input){
    uint8_t temp= input;
    PORTD = (PIND & 0x0f) + (temp & 0xf0); //LCD Data High Bytes
    
    PORTD|=0x08; //enable pulse
    _delay_us(2);
    PORTD&=~(0x08);
   
    input=(input<<4)|(input>>4);
    PORTD = (PIND & 0x0f) + (input & 0xf0); //LCD Data Low Bytes
   
   PORTD|=0x08;  //enable pulse
    _delay_us(2);
    PORTD&=~(0x08);    
};

void lcd_command(uint8_t command){
    PORTD&=~4; //LCD_RS=0 => Instruction
    write_2_nibbles(command);
    _delay_us(250);
}

void lcd_data(unsigned char data){
    PORTD|=4; //LCD_RS=1 => Data
    write_2_nibbles(data);
    _delay_us(250);
}

void lcd_clear_display(){
    lcd_command(0x01); //for most led screens
    _delay_ms(5);
}

void lcd_init(){
    _delay_ms(200);
    int i=0;
    while(i<3){      //command to switch to 8 bit mode
        PORTD=0x30;
        PORTD|=0x08;
        _delay_us(2);
        PORTD&=~0x08;
        _delay_us(250);
        ++i;
    }
 PORTD=0x20;     //command to switch to 4 bit mode
    PORTD|=0x08;
    _delay_us(2);
    PORTD&=~0x08;
    _delay_us(250);
   
    lcd_command(0x28); //5*8 dots, 2 lines
    lcd_command(0x0c); //display on, cursor off
   
    lcd_clear_display();
}



int main(void) {
    
    DDRD |= 0xFF;
    
           
    ADMUX |= 0b01000001; //needs evaluation
    ADCSRA |= 0b10000111;   
   
    lcd_init();
    uint32_t adc_value;
    int output;
    while (1) {
        ADCSRA|= (1<<ADSC);    //Start ADC
        while((ADCSRA & 0x40)==0x40){}   //Wait until ADC is finished
        adc_value=ADC;
        output=(adc_value*500)>>10; //VOLTAGE to V - maximum value is 500mV and shift 10 and divide with 1024
        lcd_clear_display();
     //break down output to digits   
    int digits[3];
    digits[2]=output%10;
    output/=10;
    digits[1]=output%10;
    output/=10;
    digits[0]=output%10;
    lcd_data(digits[0] + 0x30); //convert digits to ascii characters
    lcd_data('.');
    lcd_data(digits[1] + 0x30);
    lcd_data(digits[2] + 0x30);
    lcd_data('V');
        
        _delay_ms(1000);}
        
        
        
        
    }
