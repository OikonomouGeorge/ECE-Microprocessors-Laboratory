.include "m328PBdef.inc"  

;***** Subroutine Division Register Variables
.def drem16uL = r23
.def drem16uH = r26
.def dres16uL = r30 ; Result
.def dres16uH = r31 ; Result
.def dd16uL = r30
.def dd16uH = r31
.def dv16uL = r27
.def dv16uH = r28
.def dcnt16u = r29    
    
.def temp = r16	        
.def Vref = r17
.def low_ADC = r18
.def high_ADC = r19
.def low_reg = r20
.def mid_reg = r21
.def high_reg = r22
    
.org 0x0
    rjmp reset

.org 0x02A
    rjmp routine

reset:
    ; Init SP
    ldi temp, LOW(RAMEND)
    out SPL, temp
    ldi temp, HIGH(RAMEND)
    out SPH, temp
    
    ser temp
    out DDRD, temp
    out DDRB, temp
    rcall lcd_init 
    ldi r24, LOW(100)
    ldi r25, HIGH(100)
    rcall wait_msec
    
    ldi temp, 0b01000001
    sts ADMUX, temp
    ldi temp, 0b10000111
    sts ADCSRA, temp
    
main:
    ldi r24, LOW(1000)
    ldi r25, HIGH(1000)
    rcall wait_msec
    rcall lcd_clear_display
    sei
    lds temp, ADCSRA
    ori temp, (1<<ADSC) | (1<<ADIE)
    sts ADCSRA, temp
    rjmp main
    
routine:
    ; ADC value in high_ADC:low_ADC (10 bits)
    ; Vin (ADC*500) value in high_reg:mid_reg:low_reg (19 bits)
    ; Max(low_ADC) * 5 = 1275 = 10011111011 (11 bits)
    ldi Vref, 5	    ; Vref = 5V * 100
    lds low_ADC, ADCL
    mul low_ADC, Vref 
    mov low_reg, r0
    mov mid_reg, r1
    
    ; Max(high_ADC) * 5 = 15 = 1111 (4 bits)
    lds high_ADC, ADCH
    andi high_ADC, 0x03	; Bit mask to keep two bits of ADCH (right-justified)
    mul high_ADC, Vref
    add mid_reg, r0	; 5 bits
			   
    ; ADC * 5 value in mid_ADC:low_ADC (13 bits)
    ; Max(low_reg) * 100 = 25500 = 110001110011100 (15 bits)
    ldi temp, 100	; 100 to scale up
			; Two decimal places
    mul low_reg, temp
    mov low_reg, r0
    mov high_reg, mid_reg ; Save previous mi_reg to high_reg
    mov mid_reg, r1
    
    ; Max(high_reg) * 100 = 12 bits
    mul high_reg, temp
    add mid_reg, r0
    mov high_reg, r1
    ; If there is a carry, the carry flag (C) will be set
    clr temp		; Rc = 0x00
    adc high_reg, temp	; Rd = Rd + Rr + C 

    clc			; Make sure flag C is not affected for the following
			; shift routine
shift:
    ; Vin (ADC*500) value in high_reg:low_reg (19 bits)
    ; 1024 = 2^10, will shift right 2 times in the pair
    mov low_reg, mid_reg
    ror high_reg
    ror low_reg
    ror high_reg
    ror low_reg
    andi high_reg, 0x01	; Bit mask to keep LSB bit

div:
    mov	r30, low_reg	; Load r31:r30
    mov	r31, high_reg   ; with high_reg:low_reg
    ldi	r27, LOW(100)	; Load r28:r27
    ldi	r28, HIGH(100)	; with 100
    rcall div16u	; Compute r31:r30 / r28:r27
  
    mov r24, dres16uL
    ori r24, 0b00110000
    rcall lcd_data 
    
    ldi r24, 0b00101110	; Load dot
    rcall lcd_data

    mov r30, drem16uL
    mov r31, drem16uH
    ldi	r27, LOW(10)	; Load r28:r27
    ldi	r28, HIGH(10)	; with 10
    rcall div16u	; Compute r31:r30 / r28:r27
    
    mov r24, dres16uL
    ori r24, 0b00110000
    rcall lcd_data 
    
    mov r30, drem16uL
    mov r31, drem16uH
    ldi	r27, LOW(1)	; Load r28:r27
    ldi	r28, HIGH(1)	; with 1
    rcall div16u	; Compute r31:r30 / r28:r27
    
    mov r24, dres16uL
    ori r24, 0b00110000
    rcall lcd_data 
    
    ldi r24, 0b01010110
    rcall lcd_data
    
    reti
    
; This subroutine divides the two 16-bit numbers
; "dd8uH:dd8uL" (dividend) and "dv16uH:dv16uL" (divisor).
; The result is placed in "dres16uH:dres16uL" and the remainder in
; "drem16uH:drem16uL".    
    
div16u:	
    clr	drem16uL		; clear remainder Low byte
    sub	drem16uH,drem16uH	; clear remainder High byte and carry
    ldi	dcnt16u,17		; init loop counter

d16u_1:	
    rol	dd16uL			; shift left dividend
    rol	dd16uH
    dec	dcnt16u			; decrement counter
    brne d16u_2			; if done
    ret				;    return

d16u_2:	
    rol	drem16uL		; shift dividend into remainder
    rol	drem16uH
    sub	drem16uL,dv16uL		; remainder = remainder - divisor
    sbc	drem16uH,dv16uH		
    brcc d16u_3			; if result negative
    add	drem16uL,dv16uL		;    restore remainder
    adc	drem16uH,dv16uH
    clc				; clear carry to be shifted into result
    rjmp d16u_1			; else

d16u_3:	
    sec				; set carry to be shifted into result
    rjmp d16u_1

write_2_nibbles:
    push r24	    ; save r24(LCD_Data)

    in r25 ,PIND    ; read PIND

    andi r25 ,0x0f 
    andi r24 ,0xf0  ; r24[3:0] Holds previus PORTD[3:0]
    add r24 ,r25    ; r24[7:4] <-- LCD_Data_High_Byte
    out PORTD ,r24 

    sbi PORTD , 3  ; Enable Pulse
    nop
    nop
    cbi PORTD , 3

    pop r24	    ; Recover r24(LCD_Data)
    swap r24 
    andi r24 ,0xf0  ; r24[3:0] Holds previus PORTD[3:0]
    add r24 ,r25    ; r24[7:4] <-- LCD_Data_Low_Byte
    out PORTD ,r24

    sbi PORTD , 3  ; Enable Pulse
    nop
    nop
    cbi PORTD , 3
    ret
    
lcd_data:
    sbi PORTD , 2	    ; LCD_RS=1(PD2=1), Data
    rcall write_2_nibbles   ; send data
    ldi r24 ,250 
    ldi r25 ,0		    ; Wait 250uSec
    rcall wait_usec
    ret

lcd_command:
    cbi PORTD , 2	    ; LCD_RS=0(PD2=0), Instruction
    rcall write_2_nibbles   ; send Instruction
    ldi r24 ,250 
    ldi r25 ,0		    ; Wait 250uSec
    rcall wait_usec
    ret

lcd_clear_display:
    ldi r24 ,0x01	    ; clear display command
    rcall lcd_command

    ldi r24 ,low(5) 
    ldi r25 ,high(5)	    ; Wait 5 mSec
    rcall wait_msec 
    ret

lcd_init:
    ldi r24 ,low(200) 
    ldi r25 ,high(200)	    ; Wait 200 mSec
    rcall wait_msec 

    ldi r24 ,0x30	; command to switch to 8 bit mode
    out PORTD ,r24 
    sbi PORTD , 3	; Enable Pulse
    nop
    nop
    cbi PORTD , 3
    ldi r24 ,250 ;
    ldi r25 ,0		; Wait 250uSec
    rcall wait_usec 

    ldi r24 ,0x30	; command to switch to 8 bit mode
    out PORTD ,r24 
    sbi PORTD , 3	; Enable Pulse
    nop
    nop
    cbi PORTD , 3
    ldi r24 ,250 
    ldi r25 ,0		; Wait 250uSec
    rcall wait_usec 
 
    ldi r24 ,0x30	; command to switch to 8 bit mode
    out PORTD ,r24 
    sbi PORTD , 3	; Enable Pulse
    nop
    nop
    cbi PORTD , 3
    ldi r24 ,250 
    ldi r25 ,0		; Wait 250uSec
    rcall wait_usec

    ldi r24 ,0x20	; command to switch to 4 bit mode
    out PORTD ,r24
    sbi PORTD , 3	; Enable Pulse
    nop
    nop
    cbi PORTD , 3
    ldi r24 ,250 
    ldi r25 ,0		; Wait 250uSec
    rcall wait_usec

    ldi r24 ,0x28	; 5x8 dots, 2 lines
    rcall lcd_command
    ldi r24 ,0x0c	; dislay on, cursor off
    rcall lcd_command
    
    rcall lcd_clear_display
    ldi r24 ,0x06	; Increase address, no display shift
    rcall lcd_command 
    ret

wait_msec:
    push r24 ; 2 cycles
    push r25 ; 2 cycles
    ldi r24 , low(999) ; 1 cycle
    ldi r25 , high(999) ; 1 cycle
    rcall wait_usec ; 998.375 usec
    pop r25 ; 2 cycles
    pop r24 ; 2 cycles
    nop ; 1 cycle
    nop ; 1 cycle
    sbiw r24 , 1 ; 2 cycles
    brne wait_msec ; 1 or 2 cycles
    ret ; 4 cycles

wait_usec:
    sbiw r24 ,1 ; 2 cycles (2/16 usec)
    call delay_8cycles ; 4+8=12 cycles
    brne wait_usec ; 1 or 2 cycles
    ret
    
delay_8cycles:
    nop
    nop
    nop
    ret
