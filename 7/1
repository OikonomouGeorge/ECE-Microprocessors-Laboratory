#define F_CPU 16000000UL
#include<avr/io.h>
#include<avr/interrupt.h>
#include<util/delay.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>

#define PCA9555_0_ADDRESS 0x40
#define TWI_READ 1
#define TWI_WRITE 0
#define SCL_CLOCK 100000L
#define TWBR0_VALUE ((F_CPU/SCL_CLOCK)-16)/2

// PCA9555 REGISTERS
typedef enum {
REG_INPUT_0 =0,
REG_INPUT_1 =1,
REG_OUTPUT_0 =2,
REG_OUTPUT_1 =3,
REG_POLARITY_INV_0 =4,
REG_POLARITY_INV_1 =5,
REG_CONFIGURATION_0 =6,
REG_CONFIGURATION_1 =7
} PCA9555_REGISTERS;

//----------- Master Transmitter/Receiver -------------------
#define TW_START 0x08
#define TW_REP_START 0x10
//---------------- Master Transmitter ----------------------
#define TW_MT_SLA_ACK 0x18
#define TW_MT_SLA_NACK 0x20
#define TW_MT_DATA_ACK 0x28
//---------------- Master Receiver ----------------
#define TW_MR_SLA_ACK 0x40
#define TW_MR_SLA_NACK 0x48
#define TW_MR_DATA_NACK 0x58

#define TW_STATUS_MASK 0b11111000
#define TW_STATUS (TWSR0 & TW_STATUS_MASK)

//initialize TWI clock
void twi_init(void){
    
    TWSR0 = 0; // PRESCALER_VALUE=1
    TWBR0 = TWBR0_VALUE; // SCL_CLOCK 100KHz
}

// Read one byte from the twi device (request more data from device)
unsigned char twi_readAck(void){

    TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    while(!(TWCR0 & (1<<TWINT)));
    return TWDR0;

}

//Read one byte from the twi device, read is followed by a stop condition
unsigned char twi_readNak(void){
        
    TWCR0 = (1<<TWINT) | (1<<TWEN);
    while(!(TWCR0 & (1<<TWINT)));
    return TWDR0;
    
}

// Issues a start condition and sends address and transfer direction.
// return 0 = device accessible, 1= failed to access device
unsigned char twi_start(unsigned char address){

    uint8_t twi_status; // send START condition
    TWCR0 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); 
    // wait until transmission completed
    while(!(TWCR0 & (1<<TWINT))); 

    // check value of TWI Status Register.
    twi_status = TW_STATUS & 0xF8;
    if ( (twi_status != TW_START) && (twi_status != TW_REP_START)) return 1;
    
    // send device address
    TWDR0 = address;
    TWCR0 = (1<<TWINT) | (1<<TWEN);
    // wail until transmission completed and ACK/NACK has been received
    while(!(TWCR0 & (1<<TWINT)));

    // wail until transmission completed and ACK/NACK has been received
    while(!(TWCR0 & (1<<TWINT)));

    // check value of TWI Status Register.
    twi_status = TW_STATUS & 0xF8;
    if ( (twi_status != TW_MT_SLA_ACK) && (twi_status != TW_MR_SLA_ACK) ) return 1;
    return 0;
}

// Send start condition, address, transfer direction.
// Use ack polling to wait until device is ready
void twi_start_wait(unsigned char address){
    uint8_t twi_status;
    while ( 1 ){
        // send START condition
        TWCR0 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);

        // wait until transmission completed
        while(!(TWCR0 & (1<<TWINT)));
        
        // check value of TWI Status Register.
        twi_status = TW_STATUS & 0xF8;
        if ( (twi_status != TW_START) && (twi_status != TW_REP_START)) continue;
        
        // send device address
        TWDR0 = address;
        TWCR0 = (1<<TWINT) | (1<<TWEN);
        
        // wail until transmission completed
        while(!(TWCR0 & (1<<TWINT)));
        
        // check value of TWI Status Register.
        twi_status = TW_STATUS & 0xF8;
        if ( (twi_status == TW_MT_SLA_NACK )||(twi_status ==TW_MR_DATA_NACK) ){
            /* device busy, send stop condition to terminate write operation */
            TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
            // wait until stop condition is executed and bus released
            while(TWCR0 & (1<<TWSTO));
            continue;
        }
        break;
    }
}

// Send one byte to twi device, Return 0 if write successful or 1 if write failed
unsigned char twi_write( unsigned char data ){
    // send data to the previously addressed device
    TWDR0 = data;
    TWCR0 = (1<<TWINT) | (1<<TWEN);

    // wait until transmission completed
    while(!(TWCR0 & (1<<TWINT)));
    if( (TW_STATUS & 0xF8) != TW_MT_DATA_ACK) return 1;
    return 0;
}

// Send repeated start condition, address, transfer direction
//Return: 0 device accessible
//        1 failed to access device
unsigned char twi_rep_start(unsigned char address)
{
return twi_start( address );
}

// Terminates the data transfer and releases the twi bus
void twi_stop(void){

    // send stop condition
    TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);

    // wait until stop condition is executed and bus released
    while(TWCR0 & (1<<TWSTO));
}

void PCA9555_0_write(PCA9555_REGISTERS reg, uint8_t value){

    twi_start_wait(PCA9555_0_ADDRESS + TWI_WRITE);
    twi_write(reg);
    twi_write(value);
    twi_stop();

}

uint8_t PCA9555_0_read(PCA9555_REGISTERS reg){
    uint8_t ret_val;
    twi_start_wait(PCA9555_0_ADDRESS + TWI_WRITE);
    twi_write(reg);
    twi_rep_start(PCA9555_0_ADDRESS + TWI_READ);
    ret_val = twi_readNak();
    twi_stop();
    return ret_val;
}

void write_2_nibbles(uint8_t input){
    uint8_t temp= input;
    
    PCA9555_0_write(REG_OUTPUT_0, (PCA9555_0_read(REG_INPUT_0) & 0x0f) + (temp & 0xf0)); //LCD Data High Bytes

    
    PCA9555_0_write(REG_OUTPUT_0, PCA9555_0_read(REG_INPUT_0) | 0x08); //enable pulse
    _delay_us(2);
    PCA9555_0_write(REG_OUTPUT_0, PCA9555_0_read(REG_INPUT_0) & (~0x08));

    input=(input<<4)|(input>>4);
    PCA9555_0_write(REG_OUTPUT_0, (PCA9555_0_read(REG_INPUT_0) & 0x0f) + (input & 0xf0)); //LCD Data Low Bytes
     
    PCA9555_0_write(REG_OUTPUT_0, PCA9555_0_read(REG_INPUT_0) | 0x08);

    _delay_us(2);
    PCA9555_0_write(REG_OUTPUT_0, PCA9555_0_read(REG_INPUT_0) & (~0x08));

};

void lcd_command(uint8_t command){
    PCA9555_0_write(REG_OUTPUT_0, PCA9555_0_read(REG_INPUT_0) & (~0x04)); //LCD_RS=0 => Instruction


    write_2_nibbles(command);
    _delay_us(250);
}

void lcd_data(unsigned char data){
    PCA9555_0_write(REG_OUTPUT_0, PCA9555_0_read(REG_INPUT_0) | 0x04); //LCD_RS=1 => Data

    write_2_nibbles(data);
    _delay_us(250);
}

void lcd_clear_display(){
    lcd_command(0x01); //for most led screens
    _delay_ms(5);
}

void lcd_init(){
    _delay_ms(200);
    int i=0;
    while(i<3){      //command to switch to 8 bit mode
        PCA9555_0_write(REG_OUTPUT_0, 0x030);
        PCA9555_0_write(REG_OUTPUT_0, PCA9555_0_read(REG_INPUT_0) | 0x08);
        _delay_us(2);
         PCA9555_0_write(REG_OUTPUT_0, PCA9555_0_read(REG_INPUT_0) & (~0x08));
        _delay_us(250);
        ++i;
    }
    PCA9555_0_write(REG_OUTPUT_0, 0x20); //command to switch to 4 bit mode
    PCA9555_0_write(REG_OUTPUT_0, PCA9555_0_read(REG_INPUT_0) | 0x08); 
   
    _delay_us(2);
     PCA9555_0_write(REG_OUTPUT_0, PCA9555_0_read(REG_INPUT_0) & (~0x08));

    _delay_us(250);
   
    lcd_command(0x28); //5*8 dots, 2 lines
    lcd_command(0x0c); //display on, cursor off
   
    lcd_clear_display();
}

void lcd_string(const char *str){
    int i;
    for(i=0; str[i]!=0; i++) lcd_data(str[i]);
}

uint8_t one_wire_reset() {
  DDRD |= (1 << PD4);
  PORTD &= ~(1 << PD4);
  _delay_us(480);

  DDRD &= ~(1 << PD4);
  PORTD &= ~(1 << PD4);
  _delay_us(100);

  uint8_t input = PIND;
  _delay_us(380);

  return !(input & (1 << PD4));

}

uint8_t one_wire_receive_bit() {
  DDRD |= (1 << PD4);
  PORTD &= ~(1 << PD4);
  _delay_us(2);

  DDRD &= ~(1 << PD4);
  PORTD &= ~(1 << PD4);
  _delay_us(10);

  uint8_t input = PIND;
  _delay_us(49);
  return (input & (1 << PD4)) != 0;

}

void one_wire_transmit_bit(uint8_t data){
  DDRD |= (1 << PD4);
  PORTD &= ~(1 << PD4);
  _delay_us(2);

  PORTD|=(data<<PD4);
  _delay_us(58);

  DDRD &= ~(1 << PD4);
  PORTD &= ~(1 << PD4);
  _delay_us(1);
}

uint8_t one_wire_receive_byte(){
  uint8_t i=0;
  uint8_t receive_result=0;
  while(i<8){
    receive_result+= (one_wire_receive_bit()<<i);
    i++;
  }
  return receive_result;
}

void one_wire_transmit_byte(uint8_t data){
  uint8_t i=0;
  while(i<8){
    one_wire_transmit_bit(data & 0x01);
    data=data>>1;
    i++;
  }
}

uint8_t r24, r25;

void getvalue(){
  
    if(!one_wire_reset())
  {
    r24=0x080;
    r25=0x00;
    return;
  }

  one_wire_transmit_byte(0xCC);
  one_wire_transmit_byte(0x44);

  while(one_wire_receive_bit()!=1);

  if(!one_wire_reset())
  {
    r24=0x80;
    r25=0x00;
    return;
  }
  
  one_wire_transmit_byte(0xCC);
  one_wire_transmit_byte(0xBE);

  r25=one_wire_receive_byte();
  r24=one_wire_receive_byte();
}

void floatToString(float number, char* result) {
    // Separate the integer part
    int intPart = (int)number;

    // Convert integer part to string
    sprintf(result, "%d", intPart);

    // Move the pointer to the end of the integer part in the string
    while (*result != '\0') {
        result++;
    }

    // Add the decimal point
    *result++ = '.';

    // Separate the fractional part and scale it to 3 decimal places
    float fracPart = number - intPart;
    int fracAsInt = (int)(fracPart * 1000);  // Scale to 3 decimal places

    // Convert fractional part to string with 3 digits
    sprintf(result, "%03d", fracAsInt);
}

int main(){

  twi_init();

  PCA9555_0_write(REG_CONFIGURATION_0, 0x00);
           
  lcd_init();

  while(1)
  {
    getvalue();
 
    lcd_clear_display();
  
    if(r24==0x80 && r25==0x00)
    {
        lcd_string("No Device :(");
        _delay_ms(1000);
        continue;
    }
  
  uint16_t temperature = (uint16_t)((r24 << 8) | r25);

  if(r24 & 10000000)
  {
    temperature = ~temperature+1;
    lcd_data('-');
  }
  else {lcd_data('+');}

  float output = temperature * 0.0625;
  
  char output_string[6];
  
  floatToString(output, output_string);

  lcd_string(output_string);
  
  lcd_data(223); //code for degree symbol
  
  lcd_data('C');
  _delay_ms(1000);
  }
}
